package com.pack.servlet;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.http.HttpEntity;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.servlet.getCompanyInfo;
import com.servlet.getCompanyName;
import com.util.FileOperate;
import com.util.MyLog;
import com.util.Zip;

public class IOSPackServlet extends HttpServlet {

	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doPost(request, response);
	}

	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		response.setContentType("text/html;charset=utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();

		String command = request.getParameter("command");
		String result = null;
		if (command.equals("pack")) {
			result = pack();

		}

		if (result.equals("ERROR")) {
			out.println(result);
		} else {
			JSONObject js = new JSONObject();
			// js.put("shellOperateLogURL", shellOperateLogURL);
			// js.put("downloadFileURL", downloadFileURL);
			// js.put("androidProjectDestPath", IOSProjectDestPath);
			js.put("result", result);
			String jsonString = JSON.toJSONString(js);
			jsonString = "callback(" + jsonString + ");";
			MyLog.logger.info(jsonString);
			out.println(jsonString);

			out.flush();
			out.close();
		}

	}

	/**
	 * @throws IOException
	 * @throws ClientProtocolException
	 * 
	 */
	private String pack() throws ClientProtocolException, IOException {
		// 1.获取配置文件夹绝对路径
		String IOSConfigFilesString = new String(
				getCompanyName.companysFilePath + File.separator + "IOS"
						+ File.separator + getCompanyInfo.selectedCompanyName);
		String PackZipFileString = new String(
				getCompanyName.tomcatCompanysFilePath + File.separator + "zip"
						+ File.separator + getCompanyInfo.selectedCompanyName
						+ ".zip");

		if (!FileOperate
				.ifDirNotExistThenCreate(getCompanyName.tomcatCompanysFilePath
						+ File.separator + "zip")) {
			return new String("ERROR");
		}

		MyLog.logger.info(PackZipFileString);
		MyLog.logger.info(IOSConfigFilesString);

		// 2.压缩

		// 3.发送
		String url = "http://192.168.1.158:8080/iospack/IOSPack?selectedCompanyName="
				+ getCompanyInfo.selectedCompanyName;
		CloseableHttpClient httpclient = HttpClients.createDefault();

		// 判断配置文件是否齐全
		if ((new File(IOSConfigFilesString)).exists()) {
			Zip.zipIt(PackZipFileString, IOSConfigFilesString);
			File zipFile = new File(PackZipFileString);
			FileEntity entity = new FileEntity(zipFile, ContentType.create(
					"text/plain", "UTF-8"));
			HttpPost httppost = new HttpPost(url);
			httppost.setEntity(entity);

			// 获取response
			CloseableHttpResponse httpResponse = httpclient.execute(httppost);
			HttpEntity responseEntity = httpResponse.getEntity();

			// 直接打印出来
			if (entity != null) {
				long len = entity.getContentLength();
				if (len != -1 && len < 2048) {
					MyLog.logger.info(EntityUtils.toString(entity));
				} else {
					// 将获取的包保存在历史里面

				}
			}
		}

		return new String("success");
	}
}
