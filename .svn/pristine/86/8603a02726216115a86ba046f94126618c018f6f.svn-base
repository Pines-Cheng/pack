package com.util;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.Hashtable;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.util.file.FileOperateInput;

public class FileReceiver {

	public static final int NONE = 0; // ״̬�룬��ʾû���������
	public static final int DATAHEADER = 1; // ��ʾ��һ��Ҫ������ͷ��Ϣ
	public static final int FILEDATA = 2; // ��ʾ����Ҫ�������ϴ��ļ��Ͷ��������
	public static final int FIELDDATA = 3; // ��ʾ����Ҫ�����?����ı�ֵ
	private String fieldname = ""; // �?������
	private String fieldvalue = ""; // �?���ֵ
	private String filename = ""; // �ϴ����ļ����
	private String boundary = ""; // �ֽ���ַ�
	private String lastboundary = ""; // ����ֽ���ַ�
	// private int fileSize = 0; // �ļ�����

	private Hashtable<String, String> formfields;

	/**
	 * ���ﶼ���ڽ���HttpЭ�飬�ܲ��ɷ֣��ʲ��ٽ����ع������� ����һ��Ҫע����������
	 * 
	 * @param servlet
	 * @param request
	 * @throws IOException
	 * @throws FileNotFoundException
	 * @throws ServletException
	 */
	public void receiveFile(HttpServlet servlet, HttpServletRequest request,
			HttpServletResponse response, FileOperateInput uploadmessage,
			String platform) throws IOException, FileNotFoundException,
			ServletException {

		// ������Ϣʵ����ܳ���(������Ϣ�г���Ϣͷ֮�����ݳ���)
		int totalbytes = request.getContentLength();

		// ����������Ϣʵ����ֽ�����
		byte[] b = new byte[totalbytes];
		// ������Ϣ����
		String contentType = request.getContentType();

		// ���ɱ?������/ֵ�Ĺ�ϣ��
		formfields = new Hashtable<String, String>();

		// ����Ϣͷ�������ҵ��ֽ��Ķ���
		int pos = contentType.indexOf("boundary=");

		if (pos != -1) {
			pos += "boundary=".length();
			boundary = "--" + contentType.substring(pos); // �������ֽ��
			lastboundary = boundary + "--"; // �õ�����ֽ��
		}

		int state = NONE; // ��ʼ״̬ΪNONE

		// �õ�������Ϣ�����������
		DataInputStream in = new DataInputStream(request.getInputStream());
		in.readFully(b); // ��ݳ��ȣ�����Ϣʵ������ݶ����ֽ�����b��
		in.close(); // �ر������
		// ���밴ISO-8859-1���б��룬���ֱ�����һ���ַ�һ���ֽڣ�UTF-8��3���ֽڶ�Ӧһ���ַ�
		String reqcontent = new String(b, "ISO-8859-1"); // ���ֽ������еõ���ʾʵ����ַ�

		// ���ַ��еõ����������
		BufferedReader reqbuf = new BufferedReader(new StringReader(reqcontent));

		// ����ѭ����־
		boolean flag = true;
		int i = 0;
		while (flag) {
			String buffer = reqbuf.readLine();
			if (buffer == lastboundary || buffer == null)
				break;
			String s = new String(buffer.getBytes("ISO-8859-1"), "UTF-8");
			switch (state) {
			case NONE:
				if (s.startsWith(boundary)) {
					// �������ֽ�����ʾ��һ��һ��ͷ��Ϣ
					state = DATAHEADER;
					i += 1;
				}
				break;
			case DATAHEADER:
				pos = s.indexOf("filename=");
				// ���жϳ�����һ���ı��?���ͷ��Ϣ������һ���ϴ��ļ���ͷ��Ϣ
				if (pos == -1) {
					// ������ı��?���ͷ��Ϣ���������?������
					pos = s.indexOf("name=");
					pos += "name=".length() + 1; // 1��ʾ�����"��ռλ
					s = s.substring(pos);
					int l = s.length();
					s = s.substring(0, l - 1);
					fieldname = s; // �?�����Ʒ���fieldname
					state = FIELDDATA; // ����״̬�룬׼����ȡ�?���ֵ
				} else {
					// ������ļ���ݵ�ͷ���ȴ洢��һ�У��������ֽ������ж�λ
					String temp = s;
					// �Ƚ������ļ���
					pos = s.indexOf("filename=");
					pos += "filename=".length() + 1; // 1��ʾ�����"��ռλ
					s = s.substring(pos);
					s = s.substring(0, s.length() - 1);
					pos = s.lastIndexOf("//");
					s = s.substring(pos + 1);
					filename = s; // �ļ������filename
					formfields.put("Filename", filename);
					// ������һ���ִ��ֽ�������ȡ���ļ������
					pos = byteIndexOf(b, temp, 0); // ��λ��

					// ��λ��һ�У�2 ��ʾһ���س���һ������ռ�����ֽ�
					b = subBytes(b, pos + temp.getBytes("UTF-8").length + 2,
							b.length);

					// �ٶ�һ����Ϣ������һ������ݵ�Content-type
					s = reqbuf.readLine();

					// �����ļ���������׼��д�ļ�,�Լ�����ļ��������������
					// String CodefileName = new String(filename.getBytes(),
					// "ISO-8859-1");
					String filePath = GetPath.getConfigfolderPath(servlet,
							platform) + "/" + filename;

					// !!�޷�У��******************У���ļ���*******************************************
					if (PropertiesOperate.getProperties(filename,
							GetPath.getPropertiesFilePath(servlet, platform)) == null) {
						;
						request.setAttribute("upload.message", "ͼƬ��Ʋ���ϣ�");
						// Transfer.TransferRedirect("uploadErr.jsp", request,
						// response);
						// response.sendRedirect("/tartools/RetryServlet");
						// MyLog.logger.error(filename);
					}
					// ******************У���ļ���*****************************************************

					/*
					 * for (byte by : filename.getBytes()) { System.out.print(by
					 * + " "); }
					 */
					MyLog.logger.info("ͼƬ����ľ��·����" + filePath);

					// *******************************д�����ļ�*******************************************
					if (platform.equals("IOS")) {

					} else {
						String[] name = filename.split("\\.");
						uploadmessage.openFileInput();
						uploadmessage.writeString(name[0] + "=" + filePath
								+ "\n");
						uploadmessage.closeFileInput();
					}

					File f = new File(filePath);
					DataOutputStream fileout = new DataOutputStream(
							new FileOutputStream(f));

					// �ֽ�����������һ�У�4��ʾ���س�����ռ4���ֽڣ����еĻس�����2���ֽڣ�Content-type����
					// һ���ǻس����б�ʾ�Ŀ��У�ռ2���ֽ�
					// �õ��ļ���ݵ���ʼλ��
					b = subBytes(b, s.getBytes("UTF-8").length + 4, b.length);
					pos = byteIndexOf(b, boundary, 0); // ��λ�ļ���ݵĽ�β
					b = subBytes(b, 0, pos - 1); // ȡ���ļ����
					fileout.write(b, 0, b.length - 1); // ���ļ���ݴ���
					// fileSize = b.length - 1; // �ļ����ȴ���fileSize
					state = FIELDDATA;

					// �Ҽӵģ�����
					fileout.close();
				}
				break;
			case FIELDDATA:
				// ��ȡ�?���ֵ
				s = reqbuf.readLine();
				fieldvalue = s; // ����fieldvalue
				if (fieldvalue.length() < 10)
					formfields.put(fieldname, fieldvalue);
				state = NONE;
				break;
			case FILEDATA:
				// ������ļ���ݲ����з�����ֱ�Ӷ���ȥ
				while ((!s.startsWith(boundary))
						&& (!s.startsWith(lastboundary))) {
					s = reqbuf.readLine();
					if (s.startsWith(boundary)) {
						state = DATAHEADER;
					} else {
						break;
					}
				}
				break;
			}

		}
		// �Ҽӵģ�����
		reqbuf.close();

	}

	public String getParameter(String param) {
		return formfields.get(param);
	}

	// ��ʾ���յ��Ĳ���
	public void showParams() {

		MyLog.logger.info("receiver params : " + formfields);
	}

	/**
	 * �ֽ������е�indexOf������String���е�indexOf���� b Ҫ�������ֽ����� s Ҫ�ҵ��ַ� start ��������ʼλ��
	 * ����ҵ�������s�ĵ�һ���ֽ���b�е��±꣬û���򷵻�-1
	 * 
	 * @throws UnsupportedEncodingException
	 */
	private static int byteIndexOf(byte[] b, String s, int start)
			throws UnsupportedEncodingException {
		return byteIndexOf(b, s.getBytes("UTF-8"), start);
	}

	/**
	 * �ֽ������е�indexOf������String���е�indexOf���� b Ҫ�������ֽ����� s Ҫ�ҵ��ֽ����� start ��������ʼλ��
	 * ����ҵ�������s�ĵ�һ���ֽ���b�е��±꣬û���򷵻�-1
	 */
	private static int byteIndexOf(byte[] b, byte[] s, int start) {
		int i;
		if (s.length == 0) {
			return 0;
		}
		int max = b.length - s.length;
		if (max < 0) {
			return -1;
		}
		if (start > max) {
			return -1;
		}
		if (start < 0) {
			start = 0;
		}
		// ��b���ҵ�s�ĵ�һ��Ԫ��
		search: for (i = start; i <= max; i++) {
			if (b[i] == s[0]) {
				// �ҵ���s�еĵ�һ��Ԫ�غ󣬱Ƚ�ʣ��Ĳ����Ƿ����
				int k = 1;
				while (k < s.length) {
					if (b[k + i] != s[k]) {
						continue search;
					}
					k++;
				}
				return i;
			}
		}
		return -1;
	}

	/**
	 * ���ڴ�һ���ֽ���������ȡһ���ֽ����� ������String ���substring()
	 */
	private static byte[] subBytes(byte[] b, int from, int end) {
		byte[] result = new byte[end - from];
		System.arraycopy(b, from, result, 0, end - from);
		return result;
	}
}
