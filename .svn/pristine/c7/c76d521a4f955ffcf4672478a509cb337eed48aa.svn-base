package com.pack.servlet;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.http.HttpEntity;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

import com.alibaba.fastjson.JSONObject;
import com.pack.define.OSSServerDefine;
import com.pack.define.packConfigDefine;
import com.servlet.getCompanyName;
import com.util.FileOperate;
import com.util.MyJSON;
import com.util.MyLog;
import com.util.Zip;

/**
 * 将IOS的选中公司的配置信息压缩，传到IOS的打包服务器中去，然后接受打包服务器打好的包
 * 
 * @author spider
 * 
 */
/**
 * @author spider
 * 
 */
public class IOSPackServlet extends HttpServlet {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doPost(request, response);
	}

	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		response.setContentType("text/html;charset=utf-8");
		response.setCharacterEncoding("utf-8");

		String selectedCompanyName = request.getSession()
				.getAttribute("selectedCompanyName").toString();

		PrintWriter out = response.getWriter();

		String command = request.getParameter("command");
		String result = null;

		// 创建返回的json对象
		MyJSON js = new MyJSON();

		// 打IOS包
		if (command.equals("pack")) {
			pack(js.JSONObject, selectedCompanyName);
		}

		// 删除打包的临时文件和打包的历史文件
		if (command.equals("delete")) {

			String deleteFilePath = request.getParameter("deleteFilePath");
			String IOSPackTempFileString = request
					.getParameter("IOSPackTempFileString");
			String url = OSSServerDefine.HOST
					+ "/DeletePackTempFile?command=delete&filePath="
					+ IOSPackTempFileString;

			if (deleteFilePath != null) {
				// 删除历史包
				FileOperate.deleteFiles(deleteFilePath);
			}

			// 删除mac上的打包临时文件
			if (IOSPackTempFileString != null) {

				// 重定向,不可以
				// response.sendRedirect(url);
				// request.removeAttribute("IOSPackTempFileString");
				// request.setAttribute("filePath", IOSPackTempFileString);

				// 转发只能在房钱web应用里面
				// request.getRequestDispatcher(url).forward(request, response);

				js.JSONObject.put("redirect", url);

			} else {

				js.putAndReturn("ERROR", "IOSPackTempFileString为空！", out, js);
				return;

			}

		}

		out.println(js.getJsonpString());
		out.flush();
		out.close();

	}

	/**
	 * @param js
	 * @throws IOException
	 * @throws ClientProtocolException
	 * 
	 */
	private void pack(JSONObject js, String selectedCompanyName)
			throws ClientProtocolException, IOException {
		// 1.获取配置文件夹绝对路径
		String IOSConfigFilesString = new String(
				getCompanyName.companysFilePath + File.separator + "IOS"
						+ File.separator + selectedCompanyName);

		String imagesPath = IOSConfigFilesString + File.separator + "Images";

		String PackZipFileString = new String(
				getCompanyName.tomcatCompanysFilePath + File.separator + "zip"
						+ File.separator + selectedCompanyName + ".zip");

		// 将打包时间作为临时文件夹的名字
		String date = getCurrentTime();
		String url = OSSServerDefine.HOST + "/IOSPack?selectedCompanyName="
				+ selectedCompanyName + "&date=" + date;
		String shellOperateLogPath = new String(OSSServerDefine.HOST
				+ "/packTemp/" + date + "/shellOperateLog");
		// 打包临时文件夹的路径
		String IOSpackTempFileString = new String(
				"/Users/jiangjack/Desktop/apache-tomcat-6.0.43/webapps/iospack/packTemp/"
						+ date);

		if (!FileOperate
				.ifDirNotExistThenCreate(getCompanyName.tomcatCompanysFilePath
						+ File.separator + "zip")) {
			js.put("status", "ERROR");
			js.put("message", "创建zip目录失败！");
			return;
		}

		MyLog.logger.info(PackZipFileString);
		MyLog.logger.info(IOSConfigFilesString);

		// 2.压缩

		// 3.发送

		CloseableHttpClient httpclient = HttpClients.createDefault();

		// 判断配置文件是否齐全,如果为false，返回
		if (!verifyRequiredConfigFiles(IOSConfigFilesString, imagesPath, js)) {

			return;
		}

		// 压缩
		Zip.zipIt(PackZipFileString, IOSConfigFilesString);
		File zipFile = new File(PackZipFileString);

		FileEntity entity = new FileEntity(zipFile, ContentType.create(
				"text/plain", "UTF-8"));
		HttpPost httppost = new HttpPost(url);
		httppost.setEntity(entity);

		// 获取response
		CloseableHttpResponse httpResponse;
		try {
			httpResponse = httpclient.execute(httppost);
		} catch (Exception e) {
			js.put("status", "ERROR");
			js.put("message", "IOS打包服务器未启动！");
			return;
		}

		StatusLine statusLine = httpResponse.getStatusLine();
		// 请求成功
		if (statusLine.getStatusCode() == 200) {
			HttpEntity responseEntity = httpResponse.getEntity();

			// 直接打印出来
			if (responseEntity != null) {
				long len = responseEntity.getContentLength();
				if (len != -1 && len < 1048) {
					MyLog.logger.info(EntityUtils.toString(entity));
				} else {
					// 将获取的包保存在历史里面
					String apkTomcatSaveDir = new String(
							getCompanyName.packSaveDir + File.separator + "IOS"
									+ File.separator + selectedCompanyName);
					String apkTomcatSavePathString = new String(
							apkTomcatSaveDir + File.separator + date
									+ "_SuCunCloudV2.ipa");
					try {
						FileOperate.ifDirNotExistThenCreate(apkTomcatSaveDir);
						FileOperate
								.ifFileNotExistThenCreate(apkTomcatSavePathString);
					} catch (Exception e1) {
						js.put("status", "ERROR");
						js.put("message", "创建目录失败！");
						return;
					}

					try {

						byte[] buffer = new byte[1024];
						int readNum;
						InputStream is = responseEntity.getContent();
						FileOutputStream fos = new FileOutputStream(new File(
								apkTomcatSavePathString));
						while ((readNum = is.read(buffer)) != -1) {
							fos.write(buffer, 0, readNum);
						}
						fos.close();
						httppost.abort();

					} catch (Exception e) {
						js.put("status", "ERROR");
						js.put("message", "读取返回的应用文件失败！");
						return;

					}
					// 打包成功后返回数据
					js.put("status", "SUCCESS");
					js.put("message", "打包成功！");
					js.put("IOSDownloadFilePath", apkTomcatSavePathString);
					js.put("shellOperateLogPath", shellOperateLogPath);
					js.put("IOSPackTempFileString", IOSpackTempFileString);

				}

			} else {
				js.put("status", "ERROR");
				js.put("message", "实体为空！");
				return;
			}
		} else {
			js.put("status", "ERROR");
			js.put("message", "请求失败！");
			return;
		}
	}

	/**
	 * @param IOSConfigFilesString
	 * @param imagesPath
	 * @param js
	 * @return
	 */
	private boolean verifyRequiredConfigFiles(String IOSConfigFilesString,
			String imagesPath, JSONObject js) {
		if (!(new File(IOSConfigFilesString)).exists()) {
			js.put("status", "ERROR");
			js.put("message", "配置文件：" + IOSConfigFilesString + "不存在！");
			return false;
		}

		for (String imageName : packConfigDefine.ANDROID_IMAGES) {
			String imagPath = imagesPath + File.separator + imageName;
			if (!(new File(imagPath).exists())) {
				js.put("status", "ERROR");
				js.put("message", "配置图片：" + imageName + "不存在！");
				return false;
			}
		}

		return true;
	}

	/**
	 * @return
	 */
	private String getCurrentTime() {
		Date d = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
		String currentTime = sdf.format(d);
		return currentTime;
	}
}
