package com.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

public class Zip {
	List<String> fileList;
	private static final String OUTPUT_ZIP_FILE = "E:\\test1.zip";
	private static final String SOURCE_FOLDER = "E:\\测试";

	Zip() {
		fileList = new ArrayList<String>();
	}

	public static void main(String[] args) {

		Zip.zipIt(OUTPUT_ZIP_FILE, SOURCE_FOLDER);
	}

	/**
	 * Zip it
	 * 
	 * @param zipFile
	 *            output ZIP file location
	 */
	public static boolean zipIt(String zipFile, String sourceFolder) {

		List<String> fileList = new ArrayList<String>();
		Zip.generateFileList(new File(sourceFolder), sourceFolder, fileList);

		byte[] buffer = new byte[1024];

		try {

			FileOutputStream fos = new FileOutputStream(zipFile);
			ZipOutputStream zos = new ZipOutputStream(fos);

			System.out.println("Output to Zip : " + zipFile);
			MyLog.logger.info("Output to Zip : " + zipFile);

			System.out.println("fileList大小 : " + fileList.size());
			MyLog.logger.info("fileList大小 : " + fileList.size());

			for (String file : fileList) {
				MyLog.logger.info("File Added : " + file);
			}

			for (String file : fileList) {

				System.out.println("File Added : " + file);
				MyLog.logger.info("File Added : " + file);
				// 通过相对文件名新建实体
				ZipEntry ze = new ZipEntry(file);
				// 将实体添加到zip输出流
				zos.putNextEntry(ze);

				// 获取文件输入流，读文件
				FileInputStream in = new FileInputStream(sourceFolder
						+ File.separator + file);

				int len;
				// 写入zip输出流
				while ((len = in.read(buffer)) > 0) {
					zos.write(buffer, 0, len);
				}

				in.close();
			}

			zos.closeEntry();
			// remember close it
			zos.close();

			System.out.println("Done");
		} catch (IOException ex) {

			ex.printStackTrace();
			return false;
		}
		return true;
	}

	/**
	 * Traverse a directory and get all files, and add the file into fileList
	 * 
	 * @param node
	 *            file or directory
	 * @return
	 * @category 获取当前目录下所有文件的路径链表
	 */
	private static List<String> generateFileList(File node,
			String sourceFolder, List<String> fileList) {

		// 将文件的相对压缩目录的路径添加到链表中
		if (node.isFile()) {
			fileList.add(generateZipEntry(node.getAbsoluteFile().toString(),
					sourceFolder));
		}

		if (node.isDirectory()) {
			String[] subNote = node.list();
			for (String filename : subNote) {
				// 将路径+目录名作为参数，递归解析
				generateFileList(new File(node, filename), sourceFolder,
						fileList);
			}
		}
		return fileList;

	}

	/**
	 * Format the file path for zip
	 * 
	 * @category 返回文件相对打包目录的路径
	 * 
	 * @param file
	 *            file path
	 * @return Formatted file path
	 */
	private static String generateZipEntry(String file, String sourceFolder) {
		return file.substring(sourceFolder.length() + 1, file.length());
	}
}
