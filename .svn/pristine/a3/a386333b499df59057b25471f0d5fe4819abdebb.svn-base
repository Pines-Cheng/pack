package com.servlet;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.util.FileOperate;
import com.util.MyLog;
import com.util.PropertiesOperate;
import com.util.ServletUtil;

public class getCompanyInfo extends HttpServlet {

	static String selectedCompanyName;

	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doPost(request, response);
	}

	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		request.setCharacterEncoding("UTF-8");

		response.setContentType("text/html;charset=utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();

		// 解析http参数表
		ServletUtil.praseParaments(request);

		// 验证选中公司的目录信息，不存在就创建并copy过来，存在就直接copy到pack目录下
		initcompany(request);

		// 创建json对象
		JSONObject js = new JSONObject();
		HashMap<String, String> companyImagesInfo = new HashMap<String, String>();
		Map<String, String> companyConfigInfo = new HashMap<String, String>();

		// 获取图片目录下所有文件
		File tomcatCompanyImageFile = new File(
				getCompanyName.tomcatCompanysFilePath + "/"
						+ selectedCompanyName + "/" + "Images");
		MyLog.logger.info("getCompanyInfo:tomcatCompanyfile"
				+ getCompanyName.tomcatCompanysFilePath + "/"
				+ selectedCompanyName + "/" + "Images");
		String[] imagesStrings = tomcatCompanyImageFile.list();

		// 将图片路径写入配置文件pic.properties
		String picPropertiesPath = getCompanyName.companysFilePath + "/"
				+ selectedCompanyName + "/config/pic.properties";
		// 如果图片存在，删除重新创建
		File picPropertiesFile = new File(picPropertiesPath);
		if (picPropertiesFile.exists()) {
			picPropertiesFile.delete();
		}
		FileOperate.ifFileNotExistThenCreate(picPropertiesPath);

		// 判断图片文件夹是否为空，不为空就遍历，且返回图片的链接json字符串
		if (imagesStrings == null) {
			MyLog.logger.info("image文件夹为空！");

		} else {
			// 使用图片名和路径初始化map对象
			MyLog.logger.info("image文件夹不为空！");

			for (int i = 0; i < imagesStrings.length; i++) {
				MyLog.logger.info(imagesStrings[i] + ":" + "/pack/pack/"
						+ selectedCompanyName + imagesStrings[i]);
				companyImagesInfo.put(imagesStrings[i], "/pack/pack/"
						+ selectedCompanyName + "/Images/" + imagesStrings[i]);

				// 获取pic.properties的路径，将图片名和绝对路径追加到文件中
				String[] pictureName = imagesStrings[i].split("\\.");
				PropertiesOperate.appendProperties(pictureName[0],
						getCompanyName.companysFilePath + "/"
								+ selectedCompanyName + "/Images/"
								+ imagesStrings[i], picPropertiesPath, null);
			}

		}
		// 获取配置文件路径
		String configPropertiesPath = new String(
				getCompanyName.tomcatCompanysFilePath + "/"
						+ selectedCompanyName + "/config/config.properties");
		String androidPropertiesPath = new String(
				getCompanyName.tomcatCompanysFilePath + "/"
						+ selectedCompanyName + "/config/android.properties");

		// 获取配置文件信息,添加到map
		companyConfigInfo = PropertiesOperate.getAllProperties(
				configPropertiesPath, androidPropertiesPath);

		// 2.添加image对象，
		js.put("companyImagesInfo", companyImagesInfo);
		js.put("companyConfigInfo", companyConfigInfo);
		// 转为jsonString
		String jsonString = JSON.toJSONString(js);
		jsonString = "callback(" + jsonString + ");";
		MyLog.logger.info(jsonString);
		out.println(jsonString);
	}

	private void initcompany(HttpServletRequest request) throws IOException {
		// 打印出请求的公司名
		selectedCompanyName = request.getParameter("selectedCompany");
		if (selectedCompanyName == null) {
			selectedCompanyName = request.getSession()
					.getAttribute("selectedCompanyName").toString();
			MyLog.logger.info("从session里面获取的selectedCompanyName为："
					+ selectedCompanyName);
		} else {
			request.getSession().setAttribute("selectedCompanyName",
					selectedCompanyName);
		}
		MyLog.logger.info("initcompany:你选择了：" + selectedCompanyName + "公司！");

		// 检查公司的文件目录树，不存在则创建
		FileOperate.initCompanyFileTree(getCompanyName.companysFilePath,
				selectedCompanyName);

		// 如果tomcat的pack目录下存在选中的公司文件名，则删除，然后再复制过来
		File selectCompanyNameFile = new File(
				getCompanyName.tomcatCompanysFilePath + "/"
						+ selectedCompanyName);
		if (selectCompanyNameFile.exists()) {
			FileOperate.deleteFiles(getCompanyName.tomcatCompanysFilePath + "/"
					+ selectedCompanyName);
			selectCompanyNameFile.mkdir();
			FileOperate.copyDir(getCompanyName.companysFilePath + "/"
					+ selectedCompanyName,
					getCompanyName.tomcatCompanysFilePath + "/"
							+ selectedCompanyName);
			MyLog.logger.info("复制到" + getCompanyName.tomcatCompanysFilePath
					+ "/" + selectedCompanyName);
		} else {
			selectCompanyNameFile.mkdir();
			FileOperate.copyDir(getCompanyName.companysFilePath + "/"
					+ selectedCompanyName,
					getCompanyName.tomcatCompanysFilePath + "/"
							+ selectedCompanyName);
			MyLog.logger.info("复制到" + getCompanyName.tomcatCompanysFilePath
					+ "/" + selectedCompanyName);
		}

	}
}
